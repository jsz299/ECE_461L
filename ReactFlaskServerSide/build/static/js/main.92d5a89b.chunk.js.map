{"version":3,"sources":["Home.js","Project.js","Projects.js","reportWebVitals.js","index.js"],"names":["Home","navigate","useNavigate","open","setOpen","useState","loginUsername","setLoginUsername","loginUserID","setLoginUserID","loginPassword","setLoginPassword","username","setUsername","userID","setUserID","password","setPassword","React","createElement","Container","maxWidth","Grid","container","spacing","item","xs","md","Typography","variant","gutterBottom","onSubmit","async","e","preventDefault","userInfo","response","fetch","method","headers","Content-Type","body","JSON","stringify","json","authentication","localStorage","setItem","style","display","flexDirection","gap","TextField","label","value","onChange","target","type","Button","color","Snackbar","autoHideDuration","onClose","handleClose","event","reason","message","Project","_ref","name","members","hwSet1","hwSet2","onJoinLeave","joined","setJoined","Card","sx","margin","CardContent","justifyContent","alignItems","Box","component","map","member","index","key","onClick","handleJoinLeave","Projects","projects","setProjects","fetchProjects","getItem","concat","data","useEffect","padding","flexWrap","project","projectName","handleClickOpen","Dialog","DialogTitle","DialogContent","autoFocus","id","fullWidth","DialogActions","projectInfo","document","getElementById","description","projectId","projectID","then","ok","console","error","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","Main","Router","Routes","Route","path","element","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.92d5a89b.chunk.js","sourcesContent":["import './Home.css';\nimport { Container, TextField, Button, Typography, Grid, Snackbar } from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport {useNavigate} from \"react-router-dom\";\n\n\nfunction Home() {\n    // Used for navigating across different views/pages\n    const navigate = useNavigate()\n    // Initialize state of snackbar ~ material ui component that creates a pop-up\n    const [open, setOpen] = useState(false);\n\n    // Initialize state of text fields\n    const [loginUsername, setLoginUsername] = useState('');\n    const [loginUserID, setLoginUserID] = useState('');\n    const [loginPassword, setLoginPassword] = useState('');\n    const [username, setUsername] = useState('');\n    const [userID, setUserID] = useState('');\n    const [password, setPassword] = useState('');\n\n\n    // Handlers for updating the state based on user input\n    const handleUsernameChange = (e) => setUsername(e.target.value);\n    const handleUserIDChange = (e) => setUserID(e.target.value);\n    const handlePasswordChange = (e) => setPassword(e.target.value);\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpen(false);\n    };\n\n\n    //Handler for pressing login\n    const handleLogin = async (e) => {\n        e.preventDefault();\n\n        // Combine user input into a single object\n        const userInfo = {\n            loginUsername,\n            loginUserID,\n            loginPassword,\n        };\n\n        // Send the information to the Flask API\n        const response = await fetch('/login', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(userInfo),\n        });\n\n        // Stores the json response from API\n        const data = await response.json();\n\n        // Checks if user credentials are legit\n        if(data.authentication === true){\n            localStorage.setItem('username', loginUsername);\n            navigate('/projects'); // Route defined in index.js\n        } else {\n            setOpen(true);\n        }\n    };\n\n\n    // Handler for pressing submit\n    const handleSubmit = async (e) => {\n        // Prevent form from actually submitting without a chance to validate or process input before submitting it to the server\n        e.preventDefault(); \n\n        // Combine user input into a single object\n        const userInfo = {\n            username,\n            userID,\n            password,\n        };\n\n        // Send the information to the Flask API\n        const response = await fetch('/createaccount', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(userInfo),\n        });\n\n        const data = await response.json();\n        // Handle the response data as needed\n    };\n\n    return (\n        <Container maxWidth=\"lg\">\n            <Grid container spacing={2}>\n                <Grid item xs={12} md={6}>\n                    <Typography variant=\"h5\" gutterBottom>Login</Typography>\n                    <form onSubmit={handleLogin} style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>\n                        <TextField\n                            label=\"Username\"\n                            variant=\"outlined\"\n                            value={loginUsername}\n                            onChange={(e) => setLoginUsername(e.target.value)}\n                        />\n                        <TextField\n                            label=\"User ID\"\n                            variant=\"outlined\"\n                            value={loginUserID}\n                            onChange={(e) => setLoginUserID(e.target.value)}\n                        />\n                        <TextField\n                            label=\"Password\"\n                            type=\"password\"\n                            variant=\"outlined\"\n                            value={loginPassword}\n                            onChange={(e) => setLoginPassword(e.target.value)}\n                        />\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\">Login</Button>\n                    </form>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Typography variant=\"h5\" gutterBottom>Create Account</Typography>\n                    <form onSubmit={handleSubmit} style={{display: 'flex', flexDirection: 'column', gap: '20px'}}>\n                        <TextField\n                            label=\"Username\"\n                            variant=\"outlined\"\n                            value={username}\n                            onChange={handleUsernameChange}\n                        />\n                        <TextField\n                            label=\"User ID\"\n                            variant=\"outlined\"\n                            value={userID}\n                            onChange={handleUserIDChange}\n                        />\n                        <TextField\n                            label=\"Password\"\n                            type=\"password\"\n                            variant=\"outlined\"\n                            value={password}\n                            onChange={handlePasswordChange}\n                        />\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\">Submit</Button>\n                    </form>\n                </Grid>\n            </Grid>\n             {/* Snackbar for showing the login error message */}\n            <Snackbar\n                open={open}\n                autoHideDuration={6000}\n                onClose={handleClose}\n                message=\"Wrong Credentials. Please try again.\"\n            />\n        </Container>\n    );\n}\n\nexport default Home;\n\n// Below is example code from Professor \n\n// function Home() {\n//     const [firstName, setFirstName] = useState(\"\")\n//     const [lastName, getLastName] = useState(\"\")\n//\n//     const onClick = async(e) => {\n//\n//     console.log(\"Button was clicked\")\n//\n//     const requestOptions = {\n//         method: \"GET\"\n//     }\n//\n//\n//\n//         await fetch(\"/firstname/\", {\n//             method: \"POST\",\n//             headers: {\"Content-Type\" : \"application/json\"},\n//             //mode: \"cors\",\n//             body: JSON.stringify({'firstname':firstName})\n//         })\n//\n//     await fetch(\"/lastname/\", requestOptions)\n//         .then(response => response.json())\n//         .then(data => getLastName(data.lastname))\n//         .then(console.log(lastName));\n//     }\n\n\n//   return (\n//     <div className=\"Home\">\n//         <h2>Name Finder</h2>\n//         <label>\n//             Please enter my first name:\n//             <br />\n//             <input value={firstName} name=\"firstName\" onChange={e => setFirstName(e.target.value)} />\n//             <button onClick={onClick}>Submit</button>\n//         </label>\n//\n//         <br />\n//\n//         <p><strong>{lastName}</strong></p>\n//     </div>\n//   );\n// }","import React, { useEffect, useState } from 'react';\nimport { Card, CardContent, Button, Typography, Box } from '@mui/material';\n\nconst Project = ({ name, members, hwSet1, hwSet2, onJoinLeave }) => {\n  const [joined, setJoined] = useState(false);\n\n\n  const handleJoinLeave = () => {\n    setJoined(!joined);\n    onJoinLeave(name);\n  };\n\n  return (\n    <Card variant=\"outlined\" sx={{ margin: 2 }}>\n      <CardContent sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        {/* Use Box components to group items and apply flex as needed */}\n        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: 1 }}>\n          <Typography variant=\"h5\" component=\"div\">\n            {name}\n          </Typography>\n          {/* Map over the members array to list each member */}\n          {members.map((member, index) => (\n            <Typography key={index} color=\"text.secondary\">\n              {member}\n            </Typography>\n          ))}\n        </Box>\n\n        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: 1 }}>\n          <Typography variant=\"body2\">\n            HWSet1: {hwSet1}\n          </Typography>\n          <Typography variant=\"body2\">\n            HWSet2: {hwSet2}\n          </Typography>\n        </Box>\n\n        <Button\n          variant=\"contained\"\n          color={joined ? \"secondary\" : \"primary\"}\n          onClick={handleJoinLeave}\n        >\n          {joined ? \"Leave\" : \"Join\"}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Project;\n","import React, {useEffect, useState} from 'react';\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField, Typography } from '@mui/material';\nimport Project from './Project'; // Assuming you have a separate Project component\n\nconst Projects = () => {\n    const [open, setOpen] = useState(false);\n    const [projects, setProjects] = useState([]);\n\n    const fetchProjects = async () => {\n        const username = localStorage.getItem('username'); // Assuming username is stored in localStorage\n        const response = await fetch(`/api/projects/${username}`);\n        const data = await response.json();\n        setProjects(data.projects); // Set the projects state with fetched data\n    };\n\n\n    useEffect(() => {\n        fetchProjects(); // Call the function inside useEffect\n    }, []);\n\n\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleSubmitProject = async () => {\n        const loggedInUsername = localStorage.getItem('username')\n      const projectInfo = {\n        username: loggedInUsername,\n        name: document.getElementById('name').value,\n        description: document.getElementById('description').value,\n        projectId: document.getElementById('projectID').value,\n      };\n\n      await fetch(`/create_project`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name: projectInfo.name, description: projectInfo.description, projectID: projectInfo.projectId, username: projectInfo.username }),\n      });\n\n      handleClose(); // Close the dialog\n\n        await fetch(`/create_project`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name: projectInfo.name, description: projectInfo.description, projectID: projectInfo.projectId, username: projectInfo.username }),\n        }).then(response => {\n        if(response.ok) {\n          fetchProjects(); // Refresh projects list\n          handleClose(); // Close the dialog\n        } else {\n          console.error('Failed to create project');\n        }\n      });\n    };\n\n\n\n\n  // Dummy data for demonstration purposes\n  const projectsData = [\n    { name: \"Project Name 1\", hwSet1: \"50/100\", hwSet2: \"0/100\" },\n    { name: \"Project Name 2\", hwSet1: \"50/100\", hwSet2: \"0/100\" },\n    { name: \"Project Name 3\", hwSet1: \"0/100\", hwSet2: \"0/100\" },\n  ];\n\n  const handleJoinLeaveProject = (projectName) => {\n    console.log(`${projectName} join/leave clicked`);\n    // Logic to handle join/leave\n  };\n\n  return (\n      <div style={{padding: 20}}>\n          <Typography variant=\"h4\" gutterBottom>\n              Projects\n          </Typography>\n          <div style={{\n              display: 'flex',\n              flexDirection: 'column',\n              flexWrap: 'wrap',\n              gap: '20px',\n              justifyContent: 'center'\n          }}>\n              {projects.map((project, index) => (\n                  <Project\n                      key = {index}\n                      name = {project.projectName}\n                      hwSet1 = {'50/100'}\n                      hwSet2 = {'20/100'}\n                      members = {project.members}\n                  />\n              ))}\n          </div>\n          <Button variant=\"outlined\" onClick={handleClickOpen}>Create Project</Button>\n          <Dialog open={open} onClose={handleClose}>\n              <DialogTitle>Create a New Project</DialogTitle>\n              <DialogContent>\n                  <TextField autoFocus margin=\"dense\" id=\"name\" label=\"Project Name\" type=\"text\" fullWidth/>\n                  <TextField margin=\"dense\" id=\"description\" label=\"Description\" type=\"text\" fullWidth/>\n                  <TextField margin=\"dense\" id=\"projectID\" label=\"Project ID\" type=\"text\" fullWidth/>\n              </DialogContent>\n              <DialogActions>\n                  <Button onClick={handleClose}>Cancel</Button>\n                  <Button onClick={handleSubmitProject}>Submit</Button>\n              </DialogActions>\n          </Dialog>\n      </div>\n  );\n};\n\nexport default Projects;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport './index.css';\nimport Home from './Home';\nimport Projects from './Projects';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>\n);\n\n\nfunction Main() {\n  return (\n    <Router>\n      <div>\n        {/* Define your routes here */}\n        <Routes>\n          <Route path=\"/\" element={<Home />} /> {/* Main entry or home page */}\n          <Route path=\"/projects\" element={<Projects />} /> {/* Route to list projects */}\n          {/* Example: <Route path=\"/projects/:projectId\" element={<Project />} /> */}\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
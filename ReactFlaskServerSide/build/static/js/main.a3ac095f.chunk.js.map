{"version":3,"sources":["Home.js","Project.js","Projects.js","reportWebVitals.js","index.js"],"names":["Home","navigate","useNavigate","open","setOpen","useState","loginUsername","setLoginUsername","loginUserID","setLoginUserID","loginPassword","setLoginPassword","username","setUsername","userID","setUserID","password","setPassword","React","createElement","Container","maxWidth","Grid","container","spacing","item","xs","md","Typography","variant","gutterBottom","onSubmit","async","e","preventDefault","userInfo","response","fetch","method","headers","Content-Type","body","JSON","stringify","json","authentication","style","display","flexDirection","gap","TextField","label","value","onChange","target","type","Button","color","Snackbar","autoHideDuration","onClose","handleClose","event","reason","message","Project","_ref","name","hwSet1","hwSet2","onJoinLeave","joined","setJoined","Card","sx","margin","CardContent","justifyContent","alignItems","Box","component","onClick","handleJoinLeave","Projects","handleJoinLeaveProject","projectName","console","log","concat","padding","flexWrap","map","project","index","key","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","Main","Router","Routes","Route","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"gPA6JeA,MAvJf,WAEI,MAAMC,EAAWC,eAEVC,EAAMC,GAAWC,oBAAS,IAG1BC,EAAeC,GAAoBF,mBAAS,KAC5CG,EAAaC,GAAkBJ,mBAAS,KACxCK,EAAeC,GAAoBN,mBAAS,KAC5CO,EAAUC,GAAeR,mBAAS,KAClCS,EAAQC,GAAaV,mBAAS,KAC9BW,EAAUC,GAAeZ,mBAAS,IA0EzC,OACIa,IAAAC,cAACC,IAAS,CAACC,SAAS,MAChBH,IAAAC,cAACG,IAAI,CAACC,WAAS,EAACC,QAAS,GACrBN,IAAAC,cAACG,IAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnBT,IAAAC,cAACS,IAAU,CAACC,QAAQ,KAAKC,cAAY,GAAC,SACtCZ,IAAAC,cAAA,QAAMY,SA9DFC,UAChBC,EAAEC,iBAGF,MAAMC,EAAW,CACb7B,gBACAE,cACAE,iBAIE0B,QAAiBC,MAAM,SAAU,CACnCC,OAAQ,OACRC,QAAS,CACLC,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUR,KAOC,UAHPC,EAASQ,QAGpBC,eACJ5C,EAAS,aAGTG,GAAQ,IAmC6B0C,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUC,IAAK,SACjF/B,IAAAC,cAAC+B,IAAS,CACNC,MAAM,WACNtB,QAAQ,WACRuB,MAAO9C,EACP+C,SAAWpB,GAAM1B,EAAiB0B,EAAEqB,OAAOF,SAE/ClC,IAAAC,cAAC+B,IAAS,CACNC,MAAM,UACNtB,QAAQ,WACRuB,MAAO5C,EACP6C,SAAWpB,GAAMxB,EAAewB,EAAEqB,OAAOF,SAE7ClC,IAAAC,cAAC+B,IAAS,CACNC,MAAM,WACNI,KAAK,WACL1B,QAAQ,WACRuB,MAAO1C,EACP2C,SAAWpB,GAAMtB,EAAiBsB,EAAEqB,OAAOF,SAE/ClC,IAAAC,cAACqC,IAAM,CAACD,KAAK,SAAS1B,QAAQ,YAAY4B,MAAM,WAAU,WAGlEvC,IAAAC,cAACG,IAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnBT,IAAAC,cAACS,IAAU,CAACC,QAAQ,KAAKC,cAAY,GAAC,kBACtCZ,IAAAC,cAAA,QAAMY,SAtDDC,UAEjBC,EAAEC,iBAGF,MAAMC,EAAW,CACbvB,WACAE,SACAE,YAIEoB,QAAiBC,MAAM,iBAAkB,CAC3CC,OAAQ,OACRC,QAAS,CACLC,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUR,WAGNC,EAASQ,QAkCcE,MAAO,CAACC,QAAS,OAAQC,cAAe,SAAUC,IAAK,SACjF/B,IAAAC,cAAC+B,IAAS,CACNC,MAAM,WACNtB,QAAQ,WACRuB,MAAOxC,EACPyC,SAzGMpB,GAAMpB,EAAYoB,EAAEqB,OAAOF,SA2GrClC,IAAAC,cAAC+B,IAAS,CACNC,MAAM,UACNtB,QAAQ,WACRuB,MAAOtC,EACPuC,SA9GIpB,GAAMlB,EAAUkB,EAAEqB,OAAOF,SAgHjClC,IAAAC,cAAC+B,IAAS,CACNC,MAAM,WACNI,KAAK,WACL1B,QAAQ,WACRuB,MAAOpC,EACPqC,SApHMpB,GAAMhB,EAAYgB,EAAEqB,OAAOF,SAsHrClC,IAAAC,cAACqC,IAAM,CAACD,KAAK,SAAS1B,QAAQ,YAAY4B,MAAM,WAAU,aAKtEvC,IAAAC,cAACuC,IAAQ,CACLvD,KAAMA,EACNwD,iBAAkB,IAClBC,QA5HQC,CAACC,EAAOC,KACT,cAAXA,GAGJ3D,GAAQ,IAyHA4D,QAAQ,sEC1GTC,MA1CCC,IAA2C,IAA1CC,KAAEA,EAAIC,OAAEA,EAAMC,OAAEA,EAAMC,YAAEA,GAAaJ,EACpD,MAAOK,EAAQC,GAAanE,oBAAS,GAOrC,OACEa,IAAAC,cAACsD,IAAI,CAAC5C,QAAQ,WAAW6C,GAAI,CAAEC,OAAQ,IACrCzD,IAAAC,cAACyD,IAAW,CAACF,GAAI,CAAE3B,QAAS,OAAQ8B,eAAgB,gBAAiBC,WAAY,WAE/E5D,IAAAC,cAAC4D,IAAG,CAACL,GAAI,CAAE3B,QAAS,OAAQC,cAAe,SAAU8B,WAAY,aAAc7B,IAAK,IAClF/B,IAAAC,cAACS,IAAU,CAACC,QAAQ,KAAKmD,UAAU,OAChCb,GAEHjD,IAAAC,cAACS,IAAU,CAAC6B,MAAM,kBAAiB,6BAKrCvC,IAAAC,cAAC4D,IAAG,CAACL,GAAI,CAAE3B,QAAS,OAAQC,cAAe,SAAU8B,WAAY,aAAc7B,IAAK,IAClF/B,IAAAC,cAACS,IAAU,CAACC,QAAQ,SAAQ,WACjBuC,GAEXlD,IAAAC,cAACS,IAAU,CAACC,QAAQ,SAAQ,WACjBwC,IAIbnD,IAAAC,cAACqC,IAAM,CACL3B,QAAQ,YACR4B,MAAOc,EAAS,YAAc,UAC9BU,QA9BgBC,KACtBV,GAAWD,GACXD,EAAYH,KA8BLI,EAAS,QAAU,WCDfY,MAjCEA,KAEf,MAMMC,EAA0BC,IAC9BC,QAAQC,IAAG,GAAAC,OAAIH,EAAW,yBAI5B,OACEnE,IAAAC,cAAA,OAAK2B,MAAO,CAAE2C,QAAS,KACrBvE,IAAAC,cAACS,IAAU,CAACC,QAAQ,KAAKC,cAAY,GAAC,YAGtCZ,IAAAC,cAAA,OAAK2B,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAU0C,SAAU,OAAQzC,IAAK,OAAQ4B,eAAgB,WAhBtF,CACnB,CAAEV,KAAM,iBAAkBC,OAAQ,SAAUC,OAAQ,SACpD,CAAEF,KAAM,iBAAkBC,OAAQ,SAAUC,OAAQ,SACpD,CAAEF,KAAM,iBAAkBC,OAAQ,QAASC,OAAQ,UAcjCsB,IAAI,CAACC,EAASC,IAC1B3E,IAAAC,cAAC8C,EAAO,CACN6B,IAAKD,EACL1B,KAAMyB,EAAQzB,KACdC,OAAQwB,EAAQxB,OAChBC,OAAQuB,EAAQvB,OAChBC,YAAac,QCjBVW,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAjE,EAAA,GAAAkE,KAAAD,EAAAE,KAAA,WAAqBD,KAAKjC,IAAiD,IAAhDmC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASvC,EACpEmC,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCSd,SAASU,IACP,OACExF,IAAAC,cAACwF,IAAM,KACLzF,IAAAC,cAAA,WAEED,IAAAC,cAACyF,IAAM,KACL1F,IAAAC,cAAC0F,IAAK,CAACC,KAAK,IAAIC,QAAS7F,IAAAC,cAACnB,EAAI,QAAO,IACrCkB,IAAAC,cAAC0F,IAAK,CAACC,KAAK,YAAYC,QAAS7F,IAAAC,cAACgE,EAAQ,QAAO,OAf9C6B,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHlG,IAAAC,cAACD,IAAMmG,WAAU,KACfnG,IAAAC,cAACuF,EAAI,QAuBTX","file":"static/js/main.a3ac095f.chunk.js","sourcesContent":["import './Home.css';\nimport { Container, TextField, Button, Typography, Grid, Snackbar } from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport {useNavigate} from \"react-router-dom\";\n\n\nfunction Home() {\n    // Used for navigating across different views/pages\n    const navigate = useNavigate()\n    // Initialize state of snackbar ~ material ui component that creates a pop-up\n    const [open, setOpen] = useState(false);\n\n    // Initialize state of text fields\n    const [loginUsername, setLoginUsername] = useState('');\n    const [loginUserID, setLoginUserID] = useState('');\n    const [loginPassword, setLoginPassword] = useState('');\n    const [username, setUsername] = useState('');\n    const [userID, setUserID] = useState('');\n    const [password, setPassword] = useState('');\n\n\n    // Handlers for updating the state based on user input\n    const handleUsernameChange = (e) => setUsername(e.target.value);\n    const handleUserIDChange = (e) => setUserID(e.target.value);\n    const handlePasswordChange = (e) => setPassword(e.target.value);\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpen(false);\n    };\n\n\n    //Handler for pressing login\n    const handleLogin = async (e) => {\n        e.preventDefault();\n\n        // Combine user input into a single object\n        const userInfo = {\n            loginUsername,\n            loginUserID,\n            loginPassword,\n        };\n\n        // Send the information to the Flask API\n        const response = await fetch('/login', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(userInfo),\n        });\n\n        // Stores the json response from API\n        const data = await response.json();\n\n        // Checks if user credentials are legit\n        if(data.authentication == true){\n            navigate('/projects') // Route defined in index.js\n        }\n        else{\n            setOpen(true);\n        }\n    };\n\n\n    // Handler for pressing submit\n    const handleSubmit = async (e) => {\n        // Prevent form from actually submitting without a chance to validate or process input before submitting it to the server\n        e.preventDefault(); \n\n        // Combine user input into a single object\n        const userInfo = {\n            username,\n            userID,\n            password,\n        };\n\n        // Send the information to the Flask API\n        const response = await fetch('/createaccount', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(userInfo),\n        });\n\n        const data = await response.json();\n        // Handle the response data as needed\n    };\n\n    return (\n        <Container maxWidth=\"lg\">\n            <Grid container spacing={2}>\n                <Grid item xs={12} md={6}>\n                    <Typography variant=\"h5\" gutterBottom>Login</Typography>\n                    <form onSubmit={handleLogin} style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>\n                        <TextField\n                            label=\"Username\"\n                            variant=\"outlined\"\n                            value={loginUsername}\n                            onChange={(e) => setLoginUsername(e.target.value)}\n                        />\n                        <TextField\n                            label=\"User ID\"\n                            variant=\"outlined\"\n                            value={loginUserID}\n                            onChange={(e) => setLoginUserID(e.target.value)}\n                        />\n                        <TextField\n                            label=\"Password\"\n                            type=\"password\"\n                            variant=\"outlined\"\n                            value={loginPassword}\n                            onChange={(e) => setLoginPassword(e.target.value)}\n                        />\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\">Login</Button>\n                    </form>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Typography variant=\"h5\" gutterBottom>Create Account</Typography>\n                    <form onSubmit={handleSubmit} style={{display: 'flex', flexDirection: 'column', gap: '20px'}}>\n                        <TextField\n                            label=\"Username\"\n                            variant=\"outlined\"\n                            value={username}\n                            onChange={handleUsernameChange}\n                        />\n                        <TextField\n                            label=\"User ID\"\n                            variant=\"outlined\"\n                            value={userID}\n                            onChange={handleUserIDChange}\n                        />\n                        <TextField\n                            label=\"Password\"\n                            type=\"password\"\n                            variant=\"outlined\"\n                            value={password}\n                            onChange={handlePasswordChange}\n                        />\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\">Submit</Button>\n                    </form>\n                </Grid>\n            </Grid>\n             {/* Snackbar for showing the login error message */}\n            <Snackbar\n                open={open}\n                autoHideDuration={6000}\n                onClose={handleClose}\n                message=\"Wrong Credentials. Please try again.\"\n            />\n        </Container>\n    );\n}\n\nexport default Home;\n\n// Below is example code from Professor \n\n// function Home() {\n//     const [firstName, setFirstName] = useState(\"\")\n//     const [lastName, getLastName] = useState(\"\")\n//\n//     const onClick = async(e) => {\n//\n//     console.log(\"Button was clicked\")\n//\n//     const requestOptions = {\n//         method: \"GET\"\n//     }\n//\n//\n//\n//         await fetch(\"/firstname/\", {\n//             method: \"POST\",\n//             headers: {\"Content-Type\" : \"application/json\"},\n//             //mode: \"cors\",\n//             body: JSON.stringify({'firstname':firstName})\n//         })\n//\n//     await fetch(\"/lastname/\", requestOptions)\n//         .then(response => response.json())\n//         .then(data => getLastName(data.lastname))\n//         .then(console.log(lastName));\n//     }\n\n\n//   return (\n//     <div className=\"Home\">\n//         <h2>Name Finder</h2>\n//         <label>\n//             Please enter my first name:\n//             <br />\n//             <input value={firstName} name=\"firstName\" onChange={e => setFirstName(e.target.value)} />\n//             <button onClick={onClick}>Submit</button>\n//         </label>\n//\n//         <br />\n//\n//         <p><strong>{lastName}</strong></p>\n//     </div>\n//   );\n// }","import React, { useState } from 'react';\nimport { Card, CardContent, Button, Typography, Box } from '@mui/material';\n\nconst Project = ({ name, hwSet1, hwSet2, onJoinLeave }) => {\n  const [joined, setJoined] = useState(false);\n\n  const handleJoinLeave = () => {\n    setJoined(!joined);\n    onJoinLeave(name);\n  };\n\n  return (\n    <Card variant=\"outlined\" sx={{ margin: 2 }}>\n      <CardContent sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        {/* Use Box components to group items and apply flex as needed */}\n        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: 1 }}>\n          <Typography variant=\"h5\" component=\"div\">\n            {name}\n          </Typography>\n          <Typography color=\"text.secondary\">\n            list of authorized users\n          </Typography>\n        </Box>\n\n        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: 1 }}>\n          <Typography variant=\"body2\">\n            HWSet1: {hwSet1}\n          </Typography>\n          <Typography variant=\"body2\">\n            HWSet2: {hwSet2}\n          </Typography>\n        </Box>\n\n        <Button\n          variant=\"contained\"\n          color={joined ? \"secondary\" : \"primary\"}\n          onClick={handleJoinLeave}\n        >\n          {joined ? \"Leave\" : \"Join\"}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Project;\n","import React from 'react';\nimport { Typography } from '@mui/material';\nimport Project from './Project'; // Assuming you have a separate Project component\n\nconst Projects = () => {\n  // Dummy data for demonstration purposes\n  const projectsData = [\n    { name: \"Project Name 1\", hwSet1: \"50/100\", hwSet2: \"0/100\" },\n    { name: \"Project Name 2\", hwSet1: \"50/100\", hwSet2: \"0/100\" },\n    { name: \"Project Name 3\", hwSet1: \"0/100\", hwSet2: \"0/100\" },\n  ];\n\n  const handleJoinLeaveProject = (projectName) => {\n    console.log(`${projectName} join/leave clicked`);\n    // Logic to handle join/leave\n  };\n\n  return (\n    <div style={{ padding: 20 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Projects\n      </Typography>\n      <div style={{ display: 'flex', flexDirection: 'column', flexWrap: 'wrap', gap: '20px', justifyContent: 'center' }}>\n        {projectsData.map((project, index) => (\n          <Project\n            key={index}\n            name={project.name}\n            hwSet1={project.hwSet1}\n            hwSet2={project.hwSet2}\n            onJoinLeave={handleJoinLeaveProject}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Projects;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport './index.css';\nimport Home from './Home';\nimport Projects from './Projects';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>\n);\n\n\nfunction Main() {\n  return (\n    <Router>\n      <div>\n        {/* Define your routes here */}\n        <Routes>\n          <Route path=\"/\" element={<Home />} /> {/* Main entry or home page */}\n          <Route path=\"/projects\" element={<Projects />} /> {/* Route to list projects */}\n          {/* Example: <Route path=\"/projects/:projectId\" element={<Project />} /> */}\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
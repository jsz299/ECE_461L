{"version":3,"sources":["Home.js","Project.js","Resources.js","Projects.js","reportWebVitals.js","index.js"],"names":["Home","navigate","useNavigate","open","setOpen","useState","loginUsername","setLoginUsername","loginUserID","setLoginUserID","loginPassword","setLoginPassword","username","setUsername","userID","setUserID","password","setPassword","React","createElement","Container","maxWidth","Grid","container","spacing","item","xs","md","Typography","variant","gutterBottom","onSubmit","async","e","preventDefault","userInfo","response","fetch","method","headers","Content-Type","body","JSON","stringify","json","authentication","localStorage","setItem","style","display","flexDirection","gap","TextField","label","value","onChange","target","type","Button","color","Snackbar","autoHideDuration","onClose","handleClose","event","reason","message","Project","_ref","name","members","onJoinLeave","joined","setJoined","Card","sx","margin","CardContent","justifyContent","alignItems","Box","component","map","member","index","key","ResourceManagement","hwResources","setHwResources","hwSet1","capacity","available","hwSet2","fetchResources","ok","data","console","error","useEffect","hwSet1Checkout","setHwSet1Checkout","hwSet1Checkin","setHwSet1Checkin","hwSet2Checkout","setHwSet2Checkout","hwSet2Checkin","setHwSet2Checkin","updateResources","hwSet","action","quantity","hwCollectionName","concat","Paper","padding","Stack","fullWidth","onClick","Projects","projects","setProjects","fetchProjects","getItem","joinOpen","setJoinOpen","projectIdToJoin","setProjectIdToJoin","handleCloseJoinDialog","marginBottom","handleClickOpen","Dialog","DialogTitle","DialogContent","autoFocus","id","DialogActions","projectInfo","document","getElementById","description","projectID","handleOpenJoinDialog","projectId","flexWrap","project","projectName","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","Main","Router","Routes","Route","path","element","ReactDOM","createRoot","render","StrictMode"],"mappings":"uQA6JeA,MAvJf,WAEI,MAAMC,EAAWC,eAEVC,EAAMC,GAAWC,oBAAS,IAG1BC,EAAeC,GAAoBF,mBAAS,KAC5CG,EAAaC,GAAkBJ,mBAAS,KACxCK,EAAeC,GAAoBN,mBAAS,KAC5CO,EAAUC,GAAeR,mBAAS,KAClCS,EAAQC,GAAaV,mBAAS,KAC9BW,EAAUC,GAAeZ,mBAAS,IA0EzC,OACIa,IAAAC,cAACC,IAAS,CAACC,SAAS,MAChBH,IAAAC,cAACG,IAAI,CAACC,WAAS,EAACC,QAAS,GACrBN,IAAAC,cAACG,IAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnBT,IAAAC,cAACS,IAAU,CAACC,QAAQ,KAAKC,cAAY,GAAC,SACtCZ,IAAAC,cAAA,QAAMY,SA9DFC,UAChBC,EAAEC,iBAGF,MAAMC,EAAW,CACb7B,gBACAE,cACAE,iBAIE0B,QAAiBC,MAAM,SAAU,CACnCC,OAAQ,OACRC,QAAS,CACLC,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUR,MAOE,WAHRC,EAASQ,QAGpBC,gBACJC,aAAaC,QAAQ,WAAYzC,GACjCL,EAAS,cAETG,GAAQ,IAmC6B4C,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUC,IAAK,SACjFjC,IAAAC,cAACiC,IAAS,CACNC,MAAM,WACNxB,QAAQ,WACRyB,MAAOhD,EACPiD,SAAWtB,GAAM1B,EAAiB0B,EAAEuB,OAAOF,SAE/CpC,IAAAC,cAACiC,IAAS,CACNC,MAAM,UACNxB,QAAQ,WACRyB,MAAO9C,EACP+C,SAAWtB,GAAMxB,EAAewB,EAAEuB,OAAOF,SAE7CpC,IAAAC,cAACiC,IAAS,CACNC,MAAM,WACNI,KAAK,WACL5B,QAAQ,WACRyB,MAAO5C,EACP6C,SAAWtB,GAAMtB,EAAiBsB,EAAEuB,OAAOF,SAE/CpC,IAAAC,cAACuC,IAAM,CAACD,KAAK,SAAS5B,QAAQ,YAAY8B,MAAM,WAAU,WAGlEzC,IAAAC,cAACG,IAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnBT,IAAAC,cAACS,IAAU,CAACC,QAAQ,KAAKC,cAAY,GAAC,kBACtCZ,IAAAC,cAAA,QAAMY,SAtDDC,UAEjBC,EAAEC,iBAGF,MAAMC,EAAW,CACbvB,WACAE,SACAE,YAIEoB,QAAiBC,MAAM,iBAAkB,CAC3CC,OAAQ,OACRC,QAAS,CACLC,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUR,WAGNC,EAASQ,QAkCcI,MAAO,CAACC,QAAS,OAAQC,cAAe,SAAUC,IAAK,SACjFjC,IAAAC,cAACiC,IAAS,CACNC,MAAM,WACNxB,QAAQ,WACRyB,MAAO1C,EACP2C,SAzGMtB,GAAMpB,EAAYoB,EAAEuB,OAAOF,SA2GrCpC,IAAAC,cAACiC,IAAS,CACNC,MAAM,UACNxB,QAAQ,WACRyB,MAAOxC,EACPyC,SA9GItB,GAAMlB,EAAUkB,EAAEuB,OAAOF,SAgHjCpC,IAAAC,cAACiC,IAAS,CACNC,MAAM,WACNI,KAAK,WACL5B,QAAQ,WACRyB,MAAOtC,EACPuC,SApHMtB,GAAMhB,EAAYgB,EAAEuB,OAAOF,SAsHrCpC,IAAAC,cAACuC,IAAM,CAACD,KAAK,SAAS5B,QAAQ,YAAY8B,MAAM,WAAU,aAKtEzC,IAAAC,cAACyC,IAAQ,CACLzD,KAAMA,EACN0D,iBAAkB,IAClBC,QA5HQC,CAACC,EAAOC,KACT,cAAXA,GAGJ7D,GAAQ,IAyHA8D,QAAQ,0GCtGTC,MA9CCC,IAAoC,IAAnCC,KAAEA,EAAIC,QAAEA,EAAOC,YAAEA,GAAaH,EAC7C,MAAOI,EAAQC,GAAapE,oBAAS,GAQrC,OACEa,IAAAC,cAACuD,IAAI,CAAC7C,QAAQ,WAAW8C,GAAI,CAAEC,OAAQ,IACrC1D,IAAAC,cAAC0D,IAAW,CAACF,GAAI,CAAE1B,QAAS,OAAQ6B,eAAgB,gBAAiBC,WAAY,WAE/E7D,IAAAC,cAAC6D,IAAG,CAACL,GAAI,CAAE1B,QAAS,OAAQC,cAAe,SAAU6B,WAAY,aAAc5B,IAAK,IAClFjC,IAAAC,cAACS,IAAU,CAACC,QAAQ,KAAKoD,UAAU,OAChCZ,GAGFC,EAAQY,IAAI,CAACC,EAAQC,IACpBlE,IAAAC,cAACS,IAAU,CAACyD,IAAKD,EAAOzB,MAAM,kBAC3BwB,0BCuEAG,MA1FYA,KACzB,MAAOC,EAAaC,GAAkBnF,mBAAS,CAC7CoF,OAAQ,CAAEC,SAAU,IAAKC,UAAW,KACpCC,OAAQ,CAAEF,SAAU,IAAKC,UAAW,OAIhCE,EAAiB7D,UACrB,IACE,MAAMI,QAAiBC,MAAM,kBAC7B,GAAID,EAAS0D,GAAI,CACf,MAAMC,QAAa3D,EAASQ,OAC5B4C,EAAe,CACbC,OAAQM,EAAKN,OACbG,OAAQG,EAAKH,cAGfI,QAAQC,MAAM,6BAEhB,MAAOA,GACPD,QAAQC,MAAM,4BAA6BA,KAK/CC,oBAAU,KACRL,KACC,IAEH,MAAOM,EAAgBC,GAAqB/F,mBAAS,KAC9CgG,EAAeC,GAAoBjG,mBAAS,KAC5CkG,EAAgBC,GAAqBnG,mBAAS,KAC9CoG,EAAeC,GAAoBrG,mBAAS,IAG/CsG,EAAkB3E,MAAO4E,EAAOC,EAAQC,KAE5C,MAIMC,EAJe,CACnBtB,OAAU,iBACVG,OAAU,kBAE0BgB,GAEtC,WACyBvE,MAAK,iBAAA2E,OAAkBH,EAAM,KAAAG,OAAID,EAAgB,KAAAC,OAAIF,GAAY,CACtFxE,OAAQ,OACRC,QAAS,CAAEC,eAAgB,uBAEhBsD,GACXD,IAEAG,QAAQC,MAAK,aAAAe,OAAcH,EAAM,cAEnC,MAAOZ,GACPD,QAAQC,MAAM,6BAA8BA,KAK9C,OACI/E,IAAAC,cAAC8F,IAAK,CAACjE,MAAO,CAAE4B,OAAQ,OAAQsC,QAAS,SAC3ChG,IAAAC,cAACS,IAAU,CAACC,QAAQ,KAAKC,cAAY,GAAC,uBACtCZ,IAAAC,cAACG,IAAI,CAACC,WAAS,EAACC,QAAS,GACvBN,IAAAC,cAACG,IAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBT,IAAAC,cAACS,IAAU,CAACC,QAAQ,aAAY,UAChCX,IAAAC,cAACgG,IAAK,CAAC3F,QAAS,GACdN,IAAAC,cAACS,IAAU,KAAC,aAAW2D,EAAYE,OAAOC,UAC1CxE,IAAAC,cAACS,IAAU,KAAC,cAAY2D,EAAYE,OAAOE,WAC3CzE,IAAAC,cAACiC,IAAS,CAACC,MAAM,2BAA2BC,MAAO6C,EAAgB5C,SAAUtB,GAAKmE,EAAkBnE,EAAEuB,OAAOF,OAAQG,KAAK,SAAS2D,WAAS,IAC5IlG,IAAAC,cAACuC,IAAM,CAAC7B,QAAQ,YAAY8B,MAAM,UAAU0D,QAASA,IAAMV,EAAgB,SAAU,WAAYR,IAAiB,oBAClHjF,IAAAC,cAACiC,IAAS,CAACC,MAAM,2BAA2BC,MAAO+C,EAAe9C,SAAUtB,GAAKqE,EAAiBrE,EAAEuB,OAAOF,OAAQG,KAAK,SAAS2D,WAAS,IAC1IlG,IAAAC,cAACuC,IAAM,CAAC7B,QAAQ,YAAY8B,MAAM,UAAU0D,QAASA,IAAMV,EAAgB,SAAU,UAAWN,IAAgB,qBAGpHnF,IAAAC,cAACG,IAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBT,IAAAC,cAACS,IAAU,CAACC,QAAQ,aAAY,UAChCX,IAAAC,cAACgG,IAAK,CAAC3F,QAAS,GACdN,IAAAC,cAACS,IAAU,KAAC,aAAW2D,EAAYK,OAAOF,UAC1CxE,IAAAC,cAACS,IAAU,KAAC,cAAY2D,EAAYK,OAAOD,WAC3CzE,IAAAC,cAACiC,IAAS,CAACC,MAAM,2BAA2BC,MAAOiD,EAAgBhD,SAAUtB,GAAKuE,EAAkBvE,EAAEuB,OAAOF,OAAQG,KAAK,SAAS2D,WAAS,IAC5IlG,IAAAC,cAACuC,IAAM,CAAC7B,QAAQ,YAAY8B,MAAM,UAAU0D,QAASA,IAAMV,EAAgB,SAAU,WAAYJ,IAAiB,oBAClHrF,IAAAC,cAACiC,IAAS,CAACC,MAAM,2BAA2BC,MAAOmD,EAAelD,SAAUtB,GAAKyE,EAAiBzE,EAAEuB,OAAOF,OAAQG,KAAK,SAAS2D,WAAS,IAC1IlG,IAAAC,cAACuC,IAAM,CAAC7B,QAAQ,YAAY8B,MAAM,UAAU0D,QAASA,IAAMV,EAAgB,SAAU,UAAWF,IAAgB,wBC+F3Ga,MAhLEA,KACb,MAAOnH,EAAMC,GAAWC,oBAAS,IAC1BkH,EAAUC,GAAenH,mBAAS,IAEnCoH,EAAgBzF,UAClB,MAAMpB,EAAWkC,aAAa4E,QAAQ,YAChCtF,QAAiBC,MAAK,iBAAA2E,OAAkBpG,IACxCmF,QAAa3D,EAASQ,OAC5B4E,EAAYzB,EAAKwB,WAIrBrB,oBAAU,KACNuB,KACD,IAIH,MAIM1D,EAAcA,KAChB3D,GAAQ,KAwETuH,EAAUC,GAAevH,oBAAS,IAClCwH,EAAiBC,GAAsBzH,mBAAS,IAMjD0H,EAAwBA,IAAMH,GAAY,GAc9C,OACI1G,IAAAC,cAAA,OAAK6B,MAAO,CAACkE,QAAS,KAClBhG,IAAAC,cAAA,OAAK6B,MAAO,CAACC,QAAS,OAAQ6B,eAAgB,gBAAiBC,WAAY,SAAUiD,aAAc,KAC/F9G,IAAAC,cAACS,IAAU,CAACC,QAAQ,MAAK,YACzBX,IAAAC,cAAA,WACSD,IAAAC,cAACuC,IAAM,CAAC7B,QAAQ,WAAWwF,QAvGtBY,KACpB7H,GAAQ,KAsG4D,kBAClEc,IAAAC,cAAC+G,IAAM,CAAC/H,KAAMA,EAAM2D,QAASC,GACzB7C,IAAAC,cAACgH,IAAW,KAAC,wBACbjH,IAAAC,cAACiH,IAAa,KACVlH,IAAAC,cAACiC,IAAS,CAACiF,WAAS,EAACzD,OAAO,QAAQ0D,GAAG,OAAOjF,MAAM,eAAeI,KAAK,OAAO2D,WAAS,IACxFlG,IAAAC,cAACiC,IAAS,CAACwB,OAAO,QAAQ0D,GAAG,cAAcjF,MAAM,cAAcI,KAAK,OAAO2D,WAAS,IACpFlG,IAAAC,cAACiC,IAAS,CAACwB,OAAO,QAAQ0D,GAAG,YAAYjF,MAAM,aAAaI,KAAK,OAAO2D,WAAS,KAErFlG,IAAAC,cAACoH,IAAa,KACVrH,IAAAC,cAACuC,IAAM,CAAC2D,QAAStD,GAAa,UAC9B7C,IAAAC,cAACuC,IAAM,CAAC2D,QAtEMrF,UACxB,MACMwG,EAAc,CAChB5H,SAFqBkC,aAAa4E,QAAQ,YAG1CrD,KAAMoE,SAASC,eAAe,QAAQpF,MACtCqF,YAAaF,SAASC,eAAe,eAAepF,MACpDsF,UAAWH,SAASC,eAAe,aAAapF,cAG7BjB,MAAK,kBAAoB,CAC5CC,OAAQ,OACRC,QAAS,CACLC,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU6F,MAGb1C,IACR2B,IACA1D,KAEAiC,QAAQC,MAAM,8BAiD8B,YAG9C/E,IAAAC,cAACuC,IAAM,CAAC7B,QAAQ,WAAWwF,QAnCRwB,IAAMjB,GAAY,IAmCqB,gBAC1D1G,IAAAC,cAAC+G,IAAM,CAAC/H,KAAMwH,EAAU7D,QAASiE,GAC7B7G,IAAAC,cAACgH,IAAW,KAAC,kBACbjH,IAAAC,cAACiH,IAAa,KACVlH,IAAAC,cAACiC,IAAS,CACNiF,WAAS,EACTzD,OAAO,QACP0D,GAAG,gBACHjF,MAAM,aACNI,KAAK,OACL2D,WAAS,EACT9D,MAAOuE,EACPtE,SAAWtB,GAAM6F,EAAmB7F,EAAEuB,OAAOF,UAGrDpC,IAAAC,cAACoH,IAAa,KACVrH,IAAAC,cAACuC,IAAM,CAAC2D,QAASU,GAAuB,UACxC7G,IAAAC,cAACuC,IAAM,CAAC2D,QA/CMrF,UAC5B,MAAMpB,EAAWkC,aAAa4E,QAAQ,kBAChCrF,MAAM,gBAAiB,CACzBC,OAAQ,OACRC,QAAS,CAAEC,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEmG,UAAWjB,EAAiBjH,SAAUA,MAGjE6G,IACAG,GAAY,KAsC4C,YAKlD1G,IAAAC,cAAA,OAAK6B,MAAO,CACRC,QAAS,OACTC,cAAe,SACf6F,SAAU,OACV5F,IAAK,OACL2B,eAAgB,WAEfyC,EAASrC,IAAI,CAAC8D,EAAS5D,IACpBlE,IAAAC,cAACgD,EAAO,CACJkB,IAAKD,EACLf,KAAM2E,EAAQC,YACd3E,QAAS0E,EAAQ1E,YAI7BpD,IAAAC,cAACmE,EAAkB,MAAE,MCpKhB4D,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAApH,EAAA,GAAAqH,KAAAD,EAAAE,KAAA,WAAqBD,KAAKlF,IAAiD,IAAhDoF,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASxF,EACpEoF,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCSd,SAASU,IACP,OACE3I,IAAAC,cAAC2I,IAAM,KACL5I,IAAAC,cAAA,WAEED,IAAAC,cAAC4I,IAAM,KACL7I,IAAAC,cAAC6I,IAAK,CAACC,KAAK,IAAIC,QAAShJ,IAAAC,cAACnB,EAAI,QAAO,IACrCkB,IAAAC,cAAC6I,IAAK,CAACC,KAAK,YAAYC,QAAShJ,IAAAC,cAACmG,EAAQ,QAAO,OAf9C6C,IAASC,WAAW3B,SAASC,eAAe,SACpD2B,OACHnJ,IAAAC,cAACD,IAAMoJ,WAAU,KACfpJ,IAAAC,cAAC0I,EAAI,QAuBTX","file":"static/js/main.6b5407bf.chunk.js","sourcesContent":["import './Home.css';\nimport { Container, TextField, Button, Typography, Grid, Snackbar } from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport {useNavigate} from \"react-router-dom\";\n\n\nfunction Home() {\n    // Used for navigating across different views/pages\n    const navigate = useNavigate()\n    // Initialize state of snackbar ~ material ui component that creates a pop-up\n    const [open, setOpen] = useState(false);\n\n    // Initialize state of text fields\n    const [loginUsername, setLoginUsername] = useState('');\n    const [loginUserID, setLoginUserID] = useState('');\n    const [loginPassword, setLoginPassword] = useState('');\n    const [username, setUsername] = useState('');\n    const [userID, setUserID] = useState('');\n    const [password, setPassword] = useState('');\n\n\n    // Handlers for updating the state based on user input\n    const handleUsernameChange = (e) => setUsername(e.target.value);\n    const handleUserIDChange = (e) => setUserID(e.target.value);\n    const handlePasswordChange = (e) => setPassword(e.target.value);\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpen(false);\n    };\n\n\n    //Handler for pressing login\n    const handleLogin = async (e) => {\n        e.preventDefault();\n\n        // Combine user input into a single object\n        const userInfo = {\n            loginUsername,\n            loginUserID,\n            loginPassword,\n        };\n\n        // Send the information to the Flask API\n        const response = await fetch('/login', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(userInfo),\n        });\n\n        // Stores the json response from API\n        const data = await response.json();\n\n        // Checks if user credentials are legit\n        if(data.authentication === true){\n            localStorage.setItem('username', loginUsername);\n            navigate('/projects'); // Route defined in index.js\n        } else {\n            setOpen(true);\n        }\n    };\n\n\n    // Handler for pressing submit\n    const handleSubmit = async (e) => {\n        // Prevent form from actually submitting without a chance to validate or process input before submitting it to the server\n        e.preventDefault(); \n\n        // Combine user input into a single object\n        const userInfo = {\n            username,\n            userID,\n            password,\n        };\n\n        // Send the information to the Flask API\n        const response = await fetch('/createaccount', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(userInfo),\n        });\n\n        const data = await response.json();\n        // Handle the response data as needed\n    };\n\n    return (\n        <Container maxWidth=\"lg\">\n            <Grid container spacing={2}>\n                <Grid item xs={12} md={6}>\n                    <Typography variant=\"h5\" gutterBottom>Login</Typography>\n                    <form onSubmit={handleLogin} style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>\n                        <TextField\n                            label=\"Username\"\n                            variant=\"outlined\"\n                            value={loginUsername}\n                            onChange={(e) => setLoginUsername(e.target.value)}\n                        />\n                        <TextField\n                            label=\"User ID\"\n                            variant=\"outlined\"\n                            value={loginUserID}\n                            onChange={(e) => setLoginUserID(e.target.value)}\n                        />\n                        <TextField\n                            label=\"Password\"\n                            type=\"password\"\n                            variant=\"outlined\"\n                            value={loginPassword}\n                            onChange={(e) => setLoginPassword(e.target.value)}\n                        />\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\">Login</Button>\n                    </form>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Typography variant=\"h5\" gutterBottom>Create Account</Typography>\n                    <form onSubmit={handleSubmit} style={{display: 'flex', flexDirection: 'column', gap: '20px'}}>\n                        <TextField\n                            label=\"Username\"\n                            variant=\"outlined\"\n                            value={username}\n                            onChange={handleUsernameChange}\n                        />\n                        <TextField\n                            label=\"User ID\"\n                            variant=\"outlined\"\n                            value={userID}\n                            onChange={handleUserIDChange}\n                        />\n                        <TextField\n                            label=\"Password\"\n                            type=\"password\"\n                            variant=\"outlined\"\n                            value={password}\n                            onChange={handlePasswordChange}\n                        />\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\">Submit</Button>\n                    </form>\n                </Grid>\n            </Grid>\n             {/* Snackbar for showing the login error message */}\n            <Snackbar\n                open={open}\n                autoHideDuration={6000}\n                onClose={handleClose}\n                message=\"Wrong Credentials. Please try again.\"\n            />\n        </Container>\n    );\n}\n\nexport default Home;\n\n// Below is example code from Professor \n\n// function Home() {\n//     const [firstName, setFirstName] = useState(\"\")\n//     const [lastName, getLastName] = useState(\"\")\n//\n//     const onClick = async(e) => {\n//\n//     console.log(\"Button was clicked\")\n//\n//     const requestOptions = {\n//         method: \"GET\"\n//     }\n//\n//\n//\n//         await fetch(\"/firstname/\", {\n//             method: \"POST\",\n//             headers: {\"Content-Type\" : \"application/json\"},\n//             //mode: \"cors\",\n//             body: JSON.stringify({'firstname':firstName})\n//         })\n//\n//     await fetch(\"/lastname/\", requestOptions)\n//         .then(response => response.json())\n//         .then(data => getLastName(data.lastname))\n//         .then(console.log(lastName));\n//     }\n\n\n//   return (\n//     <div className=\"Home\">\n//         <h2>Name Finder</h2>\n//         <label>\n//             Please enter my first name:\n//             <br />\n//             <input value={firstName} name=\"firstName\" onChange={e => setFirstName(e.target.value)} />\n//             <button onClick={onClick}>Submit</button>\n//         </label>\n//\n//         <br />\n//\n//         <p><strong>{lastName}</strong></p>\n//     </div>\n//   );\n// }","import React, { useEffect, useState } from 'react';\nimport { Card, CardContent, Button, Typography, Box } from '@mui/material';\n\nconst Project = ({ name, members, onJoinLeave }) => {\n  const [joined, setJoined] = useState(false);\n\n\n  const handleJoinLeave = () => {\n    setJoined(!joined);\n    onJoinLeave(name);\n  };\n\n  return (\n    <Card variant=\"outlined\" sx={{ margin: 2 }}>\n      <CardContent sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        {/* Use Box components to group items and apply flex as needed */}\n        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: 1 }}>\n          <Typography variant=\"h5\" component=\"div\">\n            {name}\n          </Typography>\n          {/* Map over the members array to list each member */}\n          {members.map((member, index) => (\n            <Typography key={index} color=\"text.secondary\">\n              {member}\n            </Typography>\n          ))}\n        </Box>\n\n        {/*<Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: 1 }}>*/}\n        {/*  <Typography variant=\"body2\">*/}\n        {/*    HWSet1: {hwSet1}*/}\n        {/*  </Typography>*/}\n        {/*  <Typography variant=\"body2\">*/}\n        {/*    HWSet2: {hwSet2}*/}\n        {/*  </Typography>*/}\n        {/*</Box>*/}\n\n        {/*<Button*/}\n        {/*  variant=\"contained\"*/}\n        {/*  color={joined ? \"secondary\" : \"primary\"}*/}\n        {/*  onClick={handleJoinLeave}*/}\n        {/*>*/}\n        {/*  {joined ? \"Leave\" : \"Join\"}*/}\n        {/*</Button>*/}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Project;\n","// Resources.js\nimport React, { useEffect, useState } from 'react';\nimport { Typography, Paper, Grid, Button, TextField, Stack} from '@mui/material';\n\nconst ResourceManagement = () => {\n  const [hwResources, setHwResources] = useState({\n    hwSet1: { capacity: '0', available: '0' },\n    hwSet2: { capacity: '0', available: '0' }\n  });\n\n  // Function to fetch resource data from the database\n  const fetchResources = async () => {\n    try {\n      const response = await fetch('/get_resources');\n      if (response.ok) {\n        const data = await response.json();\n        setHwResources({\n          hwSet1: data.hwSet1,\n          hwSet2: data.hwSet2\n        });\n      } else {\n        console.error('Failed to fetch resources');\n      }\n    } catch (error) {\n      console.error('Failed to fetch resources', error);\n    }\n  };\n\n  // Fetch resources when the component mounts\n  useEffect(() => {\n    fetchResources();\n  }, []);\n\n  const [hwSet1Checkout, setHwSet1Checkout] = useState('');\n  const [hwSet1Checkin, setHwSet1Checkin] = useState('');\n  const [hwSet2Checkout, setHwSet2Checkout] = useState('');\n  const [hwSet2Checkin, setHwSet2Checkin] = useState('');\n\n  // Function to update the hardware set availability after check-in/check-out\nconst updateResources = async (hwSet, action, quantity) => {\n  // Map hwSet to collection names\n  const hwSetMapping = {\n    'hwSet1': 'Hardware Set 1',\n    'hwSet2': 'Hardware Set 2'\n  };\n  const hwCollectionName = hwSetMapping[hwSet];\n\n  try {\n    const response = await fetch(`/api/hardware/${action}/${hwCollectionName}/${quantity}`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n    });\n    if (response.ok) {\n      fetchResources(); // Refresh resource data\n    } else {\n      console.error(`Failed to ${action} hardware`);\n    }\n  } catch (error) {\n    console.error('Failed to update resources', error);\n  }\n};\n\n\n  return (\n      <Paper style={{ margin: '20px', padding: '20px' }}>\n    <Typography variant=\"h5\" gutterBottom>Resource Management</Typography>\n    <Grid container spacing={2}>\n      <Grid item xs={12} md={6}>\n        <Typography variant=\"subtitle1\">HWSet1</Typography>\n        <Stack spacing={2}>\n          <Typography>Capacity: {hwResources.hwSet1.capacity}</Typography>\n          <Typography>Available: {hwResources.hwSet1.available}</Typography>\n          <TextField label=\"Checkout Quantity HWSet1\" value={hwSet1Checkout} onChange={e => setHwSet1Checkout(e.target.value)} type=\"number\" fullWidth />\n          <Button variant=\"contained\" color=\"primary\" onClick={() => updateResources('hwSet1', 'checkout', hwSet1Checkout)}>Check-out HWSet1</Button>\n          <TextField label=\"Check-in Quantity HWSet1\" value={hwSet1Checkin} onChange={e => setHwSet1Checkin(e.target.value)} type=\"number\" fullWidth />\n          <Button variant=\"contained\" color=\"primary\" onClick={() => updateResources('hwSet1', 'checkin', hwSet1Checkin)}>Check-in HWSet1</Button>\n        </Stack>\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <Typography variant=\"subtitle1\">HWSet2</Typography>\n        <Stack spacing={2}>\n          <Typography>Capacity: {hwResources.hwSet2.capacity}</Typography>\n          <Typography>Available: {hwResources.hwSet2.available}</Typography>\n          <TextField label=\"Checkout Quantity HWSet2\" value={hwSet2Checkout} onChange={e => setHwSet2Checkout(e.target.value)} type=\"number\" fullWidth />\n          <Button variant=\"contained\" color=\"primary\" onClick={() => updateResources('hwSet2', 'checkout', hwSet2Checkout)}>Check-out HWSet2</Button>\n          <TextField label=\"Check-in Quantity HWSet2\" value={hwSet2Checkin} onChange={e => setHwSet2Checkin(e.target.value)} type=\"number\" fullWidth />\n          <Button variant=\"contained\" color=\"primary\" onClick={() => updateResources('hwSet2', 'checkin', hwSet2Checkin)}>Check-in HWSet2</Button>\n        </Stack>\n      </Grid>\n    </Grid>\n  </Paper>\n  );\n};\n\nexport default ResourceManagement;\n","import React, {useEffect, useState} from 'react';\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField, Typography, Paper } from '@mui/material';\nimport Project from './Project';\nimport ResourceManagement from \"./Resources\"; // Assuming you have a separate Project component\n\nconst Projects = () => {\n    const [open, setOpen] = useState(false);\n    const [projects, setProjects] = useState([]);\n\n    const fetchProjects = async () => {\n        const username = localStorage.getItem('username'); // Assuming username is stored in localStorage\n        const response = await fetch(`/api/projects/${username}`);\n        const data = await response.json();\n        setProjects(data.projects); // Set the projects state with fetched data\n    };\n\n\n    useEffect(() => {\n        fetchProjects(); // Call the function inside useEffect\n    }, []);\n\n\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    // const handleSubmitProject = async () => {\n    //     const loggedInUsername = localStorage.getItem('username')\n    //   const projectInfo = {\n    //     username: loggedInUsername,\n    //     name: document.getElementById('name').value,\n    //     description: document.getElementById('description').value,\n    //     projectId: document.getElementById('projectID').value,\n    //   };\n    //\n    //   await fetch(`/create_project`, {\n    //     method: 'POST',\n    //     headers: {\n    //       'Content-Type': 'application/json',\n    //     },\n    //     body: JSON.stringify({ name: projectInfo.name, description: projectInfo.description, projectID: projectInfo.projectId, username: projectInfo.username }),\n    //   });\n    //\n    //   handleClose(); // Close the dialog\n    //\n    //     await fetch(`/create_project`, {\n    //     method: 'POST',\n    //     headers: {\n    //       'Content-Type': 'application/json',\n    //     },\n    //     body: JSON.stringify({ name: projectInfo.name, description: projectInfo.description, projectID: projectInfo.projectId, username: projectInfo.username }),\n    //     }).then(response => {\n    //     if(response.ok) {\n    //       fetchProjects(); // Refresh projects list\n    //       handleClose(); // Close the dialog\n    //     } else {\n    //       console.error('Failed to create project');\n    //     }\n    //   });\n    // };\n\n    const handleSubmitProject = async () => {\n        const loggedInUsername = localStorage.getItem('username');\n        const projectInfo = {\n            username: loggedInUsername,\n            name: document.getElementById('name').value,\n            description: document.getElementById('description').value,\n            projectID: document.getElementById('projectID').value,\n        };\n\n        const response = await fetch(`/create_project`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(projectInfo),\n        });\n\n        if(response.ok) {\n            fetchProjects(); // This ensures the project list is updated immediately after a successful creation\n            handleClose(); // Closes the dialog after submission\n        } else {\n            console.error('Failed to create project');\n            // Potentially handle the error more gracefully here, alerting the user to the failure\n        }\n    };\n\n\n  const handleJoinLeaveProject = (projectName) => {\n    console.log(`${projectName} join/leave clicked`);\n    // Logic to handle join/leave\n  };\n\n\n  // Additional state hooks for join project dialog\nconst [joinOpen, setJoinOpen] = useState(false);\nconst [projectIdToJoin, setProjectIdToJoin] = useState('');\n\n// Function to handle opening the join project dialog\nconst handleOpenJoinDialog = () => setJoinOpen(true);\n\n// Function to handle closing the join project dialog\nconst handleCloseJoinDialog = () => setJoinOpen(false);\n  // Function to handle the join project submit action\nconst handleJoinProjectSubmit = async () => {\n    const username = localStorage.getItem('username');\n    await fetch('/join_project', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ projectId: projectIdToJoin, username: username }),\n    });\n    // Assume fetchProjects is a function that fetches updated project list\n    fetchProjects();\n    setJoinOpen(false);\n};\n\n  return (\n      <div style={{padding: 20}}>\n          <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 20}}>\n              <Typography variant=\"h4\">Projects</Typography>\n              <div>\n                       <Button variant=\"outlined\" onClick={handleClickOpen}>Create Project</Button>\n          <Dialog open={open} onClose={handleClose}>\n              <DialogTitle>Create a New Project</DialogTitle>\n              <DialogContent>\n                  <TextField autoFocus margin=\"dense\" id=\"name\" label=\"Project Name\" type=\"text\" fullWidth/>\n                  <TextField margin=\"dense\" id=\"description\" label=\"Description\" type=\"text\" fullWidth/>\n                  <TextField margin=\"dense\" id=\"projectID\" label=\"Project ID\" type=\"text\" fullWidth/>\n              </DialogContent>\n              <DialogActions>\n                  <Button onClick={handleClose}>Cancel</Button>\n                  <Button onClick={handleSubmitProject}>Submit</Button>\n              </DialogActions>\n          </Dialog>\n          <Button variant=\"outlined\" onClick={handleOpenJoinDialog}>Join Project</Button>\n          <Dialog open={joinOpen} onClose={handleCloseJoinDialog}>\n              <DialogTitle>Join a Project</DialogTitle>\n              <DialogContent>\n                  <TextField\n                      autoFocus\n                      margin=\"dense\"\n                      id=\"joinProjectId\"\n                      label=\"Project ID\"\n                      type=\"text\"\n                      fullWidth\n                      value={projectIdToJoin}\n                      onChange={(e) => setProjectIdToJoin(e.target.value)}\n                  />\n              </DialogContent>\n              <DialogActions>\n                  <Button onClick={handleCloseJoinDialog}>Cancel</Button>\n                  <Button onClick={handleJoinProjectSubmit}>Join</Button>\n              </DialogActions>\n          </Dialog>\n              </div>\n          </div>\n          <div style={{\n              display: 'flex',\n              flexDirection: 'column',\n              flexWrap: 'wrap',\n              gap: '20px',\n              justifyContent: 'center'\n          }}>\n              {projects.map((project, index) => (\n                  <Project\n                      key={index}\n                      name={project.projectName}\n                      members={project.members}\n                  />\n              ))}\n          </div>\n          <ResourceManagement/> {/* Use the Resource Management component */}\n      </div>\n  );\n};\n\nexport default Projects;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport './index.css';\nimport Home from './Home';\nimport Projects from './Projects';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>\n);\n\n\nfunction Main() {\n  return (\n    <Router>\n      <div>\n        {/* Define your routes here */}\n        <Routes>\n          <Route path=\"/\" element={<Home />} /> {/* Main entry or home page */}\n          <Route path=\"/projects\" element={<Projects />} /> {/* Route to list projects */}\n          {/* Example: <Route path=\"/projects/:projectId\" element={<Project />} /> */}\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}